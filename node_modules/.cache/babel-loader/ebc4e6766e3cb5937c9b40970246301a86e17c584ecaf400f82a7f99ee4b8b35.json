{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yugan\\\\project\\\\mapping-app\\\\src\\\\components\\\\MapControls\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapControls = () => {\n  _s();\n  const regions = ['United States', 'India', 'United Kingdom'];\n  const [selectedRegion, setSelectedRegion] = useState('');\n  const [regionInfo, setRegionInfo] = useState('');\n  const handleRegionChange = event => {\n    setSelectedRegion(event.target.value);\n  };\n  const handleLoadButtonClick = () => {\n    if (selectedRegion) {\n      // Simulate loading region info from API or database\n      // For example, you can use an API call here to get region info\n      // Replace this with actual logic to fetch region info\n      setTimeout(() => {\n        setRegionInfo(getRegionInfo(selectedRegion));\n      }, 1000);\n    }\n  };\n\n  // Function to get region info based on the selected region\n  const getRegionInfo = region => {\n    // Replace this with your logic to get region info from API or database\n    // For demonstration, I'm using a simple object with region info\n    const regionInfoMap = {\n      'United States': 'Information about the United States',\n      India: 'Information about India',\n      'United Kingdom': 'Information about the United Kingdom'\n    };\n    return regionInfoMap[region];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"floating-controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedRegion,\n        onChange: handleRegionChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a region\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), regions.map(region => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: region,\n          children: region\n        }, region, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLoadButtonClick,\n        children: \"Load\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), regionInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"region-info-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Region Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: regionInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(MapControls, \"gjS89iJlSrYF40JkyXlZn/9VJzc=\");\n_c = MapControls;\nexport default MapControls;\nvar _c;\n$RefreshReg$(_c, \"MapControls\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MapControls","_s","regions","selectedRegion","setSelectedRegion","regionInfo","setRegionInfo","handleRegionChange","event","target","value","handleLoadButtonClick","setTimeout","getRegionInfo","region","regionInfoMap","India","className","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","_c","$RefreshReg$"],"sources":["C:/Users/yugan/project/mapping-app/src/components/MapControls/index.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst MapControls = () => {\r\n  const regions = ['United States', 'India', 'United Kingdom'];\r\n  const [selectedRegion, setSelectedRegion] = useState('');\r\n  const [regionInfo, setRegionInfo] = useState('');\r\n\r\n  const handleRegionChange = (event) => {\r\n    setSelectedRegion(event.target.value);\r\n  };\r\n\r\n  const handleLoadButtonClick = () => {\r\n    if (selectedRegion) {\r\n      // Simulate loading region info from API or database\r\n      // For example, you can use an API call here to get region info\r\n      // Replace this with actual logic to fetch region info\r\n      setTimeout(() => {\r\n        setRegionInfo(getRegionInfo(selectedRegion));\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  // Function to get region info based on the selected region\r\n  const getRegionInfo = (region) => {\r\n    // Replace this with your logic to get region info from API or database\r\n    // For demonstration, I'm using a simple object with region info\r\n    const regionInfoMap = {\r\n      'United States': 'Information about the United States',\r\n      India: 'Information about India',\r\n      'United Kingdom': 'Information about the United Kingdom',\r\n    };\r\n\r\n    return regionInfoMap[region];\r\n  };\r\n\r\n  return (\r\n    <div className=\"floating-controls\">\r\n      <div className=\"form-input\">\r\n        <select value={selectedRegion} onChange={handleRegionChange}>\r\n          <option value=\"\">Select a region</option>\r\n          {regions.map((region) => (\r\n            <option key={region} value={region}>\r\n              {region}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <button onClick={handleLoadButtonClick}>Load</button>\r\n      </div>\r\n      {regionInfo && (\r\n        <div className=\"region-info-card\">\r\n          <h3>Region Information</h3>\r\n          <p>{regionInfo}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );  \r\n};\r\n\r\nexport default MapControls;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,OAAO,GAAG,CAAC,eAAe,EAAE,OAAO,EAAE,gBAAgB,CAAC;EAC5D,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMU,kBAAkB,GAAIC,KAAK,IAAK;IACpCJ,iBAAiB,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACvC,CAAC;EAED,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;IAClC,IAAIR,cAAc,EAAE;MAClB;MACA;MACA;MACAS,UAAU,CAAC,MAAM;QACfN,aAAa,CAACO,aAAa,CAACV,cAAc,CAAC,CAAC;MAC9C,CAAC,EAAE,IAAI,CAAC;IACV;EACF,CAAC;;EAED;EACA,MAAMU,aAAa,GAAIC,MAAM,IAAK;IAChC;IACA;IACA,MAAMC,aAAa,GAAG;MACpB,eAAe,EAAE,qCAAqC;MACtDC,KAAK,EAAE,yBAAyB;MAChC,gBAAgB,EAAE;IACpB,CAAC;IAED,OAAOD,aAAa,CAACD,MAAM,CAAC;EAC9B,CAAC;EAED,oBACEf,OAAA;IAAKkB,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChCnB,OAAA;MAAKkB,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzBnB,OAAA;QAAQW,KAAK,EAAEP,cAAe;QAACgB,QAAQ,EAAEZ,kBAAmB;QAAAW,QAAA,gBAC1DnB,OAAA;UAAQW,KAAK,EAAC,EAAE;UAAAQ,QAAA,EAAC;QAAe;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EACxCrB,OAAO,CAACsB,GAAG,CAAEV,MAAM,iBAClBf,OAAA;UAAqBW,KAAK,EAAEI,MAAO;UAAAI,QAAA,EAChCJ;QAAM,GADIA,MAAM;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEX,CACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC,eACTxB,OAAA;QAAQ0B,OAAO,EAAEd,qBAAsB;QAAAO,QAAA,EAAC;MAAI;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC,EACLlB,UAAU,iBACTN,OAAA;MAAKkB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/BnB,OAAA;QAAAmB,QAAA,EAAI;MAAkB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3BxB,OAAA;QAAAmB,QAAA,EAAIb;MAAU;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACtB,EAAA,CAtDID,WAAW;AAAA0B,EAAA,GAAX1B,WAAW;AAwDjB,eAAeA,WAAW;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}